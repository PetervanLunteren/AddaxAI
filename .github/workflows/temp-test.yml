name: temp-test

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "What is tag name of the latest release? E.g., v5.29"
        required: true
  release:
    types:
      - published

jobs:
  upload_release:
    runs-on: ubuntu-latest

    env:
      RELEASE_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag_name }}
      BUCKET_NAME: github-release-files-storage

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Upload URL for Release
        id: get_upload_url
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ env.RELEASE_VERSION }}',
            });
            // Write the upload URL to the environment file
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_ENV, `UPLOAD_URL=${release.data.upload_url}\n`);

      - name: Remove existing asset if present
        run: |
          echo "Hello world!" >> temp.txt # DEBUG
          
          # List all assets in the release
          release_info=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_VERSION }}
            )
          
          # Extract asset ID by matching the name
          asset_id=$(echo $release_info | jq -r '.assets[] | select(.name == "MacOS-installer-${{ env.RELEASE_VERSION }}.zip") | .id')
          echo "asset_id is $asset_id"
          
          # Check if the asset exists and delete it
          if [ ! -z "$asset_id" ]; then
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
          else
            echo "Asset not found. Continue with upload..."
          fi

      - name: Upload Asset to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: "temp.txt"
          asset_name: "MacOS-installer-${{ env.RELEASE_VERSION }}.zip"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
