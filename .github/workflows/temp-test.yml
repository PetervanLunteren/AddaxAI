name: temp-test

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "What is tag name of the latest release? E.g., v5.29"
        required: true
  release:
    types:
      - published

jobs:
  build-windows-release:
    runs-on: windows-2022

    env:
      RELEASE_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag_name }}
      BUCKET_NAME: github-release-files-storage
      CONDA_DIR: C:\Miniconda
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Upload URL for Release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ env.RELEASE_VERSION }}',
            })
            // Write the upload URL to the environment file instead of using set-output
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_ENV, `UPLOAD_URL=${release.data.upload_url}\n`);

      - name: Create temp.txt file with content
        run: |
          "Hello World!" | Out-File -FilePath "temp.txt"
        shell: powershell

      - name: Remove existing asset if present
        run: |
          @echo off
          setlocal
          
          REM List all assets in the release using curl
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ^
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_VERSION }} > release_info.json
          
          REM Extract asset ID by matching the name
          for /f "delims=" %%A in ('jq -r ".assets[] | select(.name == \"Windows-installer-v5.29.exe\") | .id" release_info.json') do set asset_id=%%A
          echo The asset_id is: %asset_id%
          
          REM Check if the asset exists and delete it
          if not "%asset_id%"=="" (
            curl -X DELETE ^
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ^
              https://api.github.com/repos/${{ github.repository }}/releases/assets/%asset_id%
          ) else (
            echo Asset not found. Continue with upload...
          )
          
          endlocal
        shell: cmd

      - name: Upload Asset to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # Use the updated environment variable
          asset_path: "temp.txt"
          asset_name: "Windows-installer-${{ env.RELEASE_VERSION }}.exe"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
