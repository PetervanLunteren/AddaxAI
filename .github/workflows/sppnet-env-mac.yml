name: Build spp net env macOS release

on:
  workflow_dispatch:

jobs:
  build-sppnet-env-release:
    runs-on: macos-15

    env:
      # can remove this if proven succesfull
      # RELEASE_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag_name }}
      # BUCKET_NAME: github-release-files-storage
      BRANCH_NAME: ${{ github.event_name == 'release' && 'main' || github.ref_name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest release tag
        id: release_info
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}

      - name: Set latest release tag to global
        run: |
          RELEASE_VERSION=${{ steps.release_info.outputs.release }}
          echo RELEASE_VERSION: $RELEASE_VERSION
          echo "RELEASE_VERSION=${{ steps.release_info.outputs.release }}" >> $GITHUB_ENV

      - name: Set BUCKET_NAME based on chosen branch
        run: |
          echo "BRANCH_NAME is $BRANCH_NAME"
          if [ "$BRANCH_NAME" = "main" ]; then
            BUCKET_NAME="github-release-files-storage"
          else
            BUCKET_NAME="github-release-files-storage-beta-versions"
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV 
          echo "BUCKET_NAME is $BUCKET_NAME"

      - name: Install Miniconda
        run: |
          mkdir "$HOME/miniforge"
          curl --ipv4 -L "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh" -o miniforge.sh
          bash miniforge.sh -b -u -p "$HOME/miniforge"
          echo "succesfully installed at $HOME/miniforge"
          
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_STORAGE_UPLOAD_KEY }}
  
      - name: Set up Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: github-file-storage
          
      - name: Build and upload environments
        run: |

          ### log release version used
          echo "Using tag name ${{ env.RELEASE_VERSION }}"
        
          ### set ipv4 settings
          export PIP_NO_IPV6=1
          export CONDA_SSL_VERIFY=0
          export CONDA_USE_IPV4=1
          
          ### source conda 
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          source "$HOME/miniforge/bin/activate"
          conda_exe="$HOME/miniforge/bin/conda"

          ### set high timeout value and ip address for ipv4 fallback issues
          $conda_exe config --set remote_connect_timeout_secs 120
          $conda_exe config --set remote_max_retries 5
          $conda_exe config --set remote_read_timeout_secs 120
          $conda_exe config --set ssl_verify False
          $conda_exe config --set fetch_threads 2
          $conda_exe config --show

          ### install mamba
          $conda_exe install mamba -n base -c conda-forge -y
          conda_exe="$HOME/miniforge/bin/mamba"
                    
          ### build env-speciesnet
          $conda_exe create -p "$HOME/envs/env-speciesnet" python=3.11 -y
          $conda_exe run -p "$HOME/envs/env-speciesnet" pip install --timeout=120 --use-pep517 reverse_geocoder
          $conda_exe run -p "$HOME/envs/env-speciesnet" pip install --timeout=120 speciesnet

          ### clean
          $conda_exe clean --all --yes --force-pkgs-dirs
          $conda_exe clean --all --yes

          ### zip envs
          tar -caf "env-speciesnet.tar.xz" "$HOME/envs/env-speciesnet"

          ### upload 
          gsutil cp -r "env-speciesnet.tar.xz" gs://${{ env.BUCKET_NAME }}/latest/env-speciesnet.tar.xz

          ### remove
          rm "env-speciesnet.tar.xz"
         


  
